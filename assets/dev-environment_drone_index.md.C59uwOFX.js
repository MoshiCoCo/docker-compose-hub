import{_ as e,c as a,o as i,a5 as s}from"./chunks/framework.-Zveb6AF.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"dev-environment/drone/index.md","filePath":"dev-environment/drone/index.md"}'),t={name:"dev-environment/drone/index.md"},o=s(`<h2 id="drone" tabindex="-1">Drone <a class="header-anchor" href="#drone" aria-label="Permalink to &quot;Drone&quot;">​</a></h2><p>一套适用于小型企业的轻量<code>Devops</code>环境</p><h2 id="创建oauth2应用" tabindex="-1">创建oauth2应用 <a class="header-anchor" href="#创建oauth2应用" aria-label="Permalink to &quot;创建oauth2应用&quot;">​</a></h2><p>在<a href="https://gitee.com/oauth/applications" target="_blank" rel="noreferrer">Gitee</a>中创建oauth2应用</p><ul><li>回调地址应该是 <a href="https://DRONE_SERVER_HOST/login" target="_blank" rel="noreferrer">https://DRONE_SERVER_HOST/login</a></li><li>需要赋予<code>project</code>, <code>pull_requests</code>, <code>hook</code>, <code>email</code>权限</li><li>将此应用的<code>client_id</code>和<code>client_secret</code>拷贝到<code>docker-compose.yml</code>文件中对应的位置</li></ul><h2 id="生成rpc密钥" tabindex="-1">生成RPC密钥 <a class="header-anchor" href="#生成rpc密钥" aria-label="Permalink to &quot;生成RPC密钥&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rand</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -hex</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">98ada780653e6a4c9f1e19eb9a1c73ec</span></span></code></pre></div><h2 id="启动应用" tabindex="-1">启动应用 <a class="header-anchor" href="#启动应用" aria-label="Permalink to &quot;启动应用&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><h2 id="tips" tabindex="-1">Tips <a class="header-anchor" href="#tips" aria-label="Permalink to &quot;Tips&quot;">​</a></h2><ul><li><a href="https://docs.drone.io/" target="_blank" rel="noreferrer">Drone的官方文档</a></li><li><a href="https://plugins.drone.io/" target="_blank" rel="noreferrer">Drone 官方插件列表</a></li><li><a href="https://docs.drone.io/server/overview/" target="_blank" rel="noreferrer">Drone支持的代码托管平台</a></li><li>注意启动的用户, 如果为root, 则容器中产生的所有文件都属root所有.推荐做法是创建一个Devops用户.</li></ul>`,11),r=[o];function n(l,h,d,c,p,k){return i(),a("div",null,r)}const g=e(t,[["render",n]]);export{_ as __pageData,g as default};
